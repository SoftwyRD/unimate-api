from __future__ import annotations
from typing import Iterable, Optional

from django.contrib.auth.models import (
    AbstractUser,
    BaseUserManager,
)
from django.db import models
from django.utils.translation import gettext_lazy as _


class UserManager(BaseUserManager):
    def create(
        self,
        first_name,
        last_name,
        username,
        email,
        password,
    ) -> User:
        user = self.model(
            first_name=first_name,
            last_name=last_name,
            username=username,
            email=email,
            password=password,
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(
        self,
        first_name,
        last_name,
        username,
        email,
        password,
    ) -> User:
        user = self.create(
            first_name,
            last_name,
            username,
            email,
            password,
        )
        user.is_staff = True
        user.is_superuser = True
        user.save(using=self._db)
        return user

    def get_by_natural_key(self, username):
        case_insensitive_username_field = "{}__iexact".format(
            self.model.USERNAME_FIELD
        )
        return self.get(**{case_insensitive_username_field: username})


class User(AbstractUser):
    id = models.AutoField(
        _("id"),
        help_text=_("Required. Autogenerated. Non editable."),
        primary_key=True,
        unique=True,
        editable=False,
    )
    first_name = models.CharField(
        _("first name"),
        help_text=_("Required. 50 characters or fewer."),
        max_length=50,
    )
    last_name = models.CharField(
        _("last name"),
        help_text=_("Required. 50 characters or fewer."),
        max_length=50,
    )
    username = models.CharField(
        _("username"),
        help_text=_("Required. 20 characters or fewer."),
        unique=True,
        max_length=20,
        validators=[AbstractUser.username_validator],
        error_messages={
            "unique": _("A user with that username already exists."),
        },
    )
    email = models.EmailField(
        _("email"),
        help_text=_("Required. 255 characters or fewer."),
        unique=True,
        max_length=255,
        error_messages={
            "unique": _("A user with that email already exists."),
        },
    )

    objects = UserManager()

    REQUIRED_FIELDS = ["first_name", "last_name", "email"]

    class Meta:
        verbose_name = _("user")
        verbose_name_plural = _("users")

    def __str__(self):
        return self.username
